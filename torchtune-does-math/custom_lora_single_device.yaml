# Config for single device LoRA finetuning in lora_finetune_single_device.py
# using a Deepseek Math 7B model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download deepseek-ai/deepseek-math-7b-instruct /data/users/ebs/tuneathon-ckpts
#
# To launch on a single device, run the following command from root:
#   tune run custom_lora_single_device --config custom_lora_single_device.yaml
#
# This config works only for training on single device.

# Model arguments
model:
  _component_: torchtune.models.llama2.lora_llama2
  vocab_size: 102400
  num_layers: 30
  num_heads: 32
  num_kv_heads: 32
  embed_dim: 4096
  max_seq_len: 4096
  attn_dropout: 0.0
  norm_eps: 1e-5
  lora_attn_modules: ['q_proj', 'v_proj']
  apply_lora_to_mlp: False
  apply_lora_to_output: False
  lora_rank: 8
  lora_alpha: 16
  lora_dropout: 0.0


tokenizer:
  _component_: tokenizer.DeepSeekTokenizer
  path: /data/users/ebs/tuneathon-ckpts/base-model/vocab.json
  merges_file: /data/users/ebs/tuneathon-ckpts/base-model/merges.txt
  prompt_template:
    user:
      - "User: "
      - "\\nPlease reason step by step, and put your final answer within \\boxed{}."
    assistant:
      - "Assistant: "
      - "\\n"
  max_seq_len: 4096

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  checkpoint_dir: /data/users/ebs/tuneathon-ckpts/base-model
  checkpoint_files: [
    pytorch_model-00001-of-00002.bin,
    pytorch_model-00002-of-00002.bin,
  ]
  output_dir: /data/users/ebs/tuneathon-ckpts/base-model
  model_type: LLAMA2
resume_from_checkpoint: False
save_adapter_weights_only: False

dataset:
  - _component_: torchtune.datasets.instruct_dataset
    source: json
    split: train
    column_map:
      input: theorem
      output: proof
    data_dir: /data/users/ebs/naturalproofsdata/
    data_files: naturalproofs_stack_cleaned.json
  - _component_: torchtune.datasets.instruct_dataset
    source: json
    split: train
    column_map:
      input: theorem
      output: proof
    data_dir: /data/users/ebs/naturalproofsdata/
    data_files: naturalproofs_proofwiki_cleaned.json
  - _component_: torchtune.datasets.instruct_dataset
    source: json
    split: train
    column_map:
      input: theorem
      output: proof
    data_dir: /data/users/ebs/naturalproofsdata/
    data_files: naturalproofs_trench_cleaned.json
  - _component_: torchtune.datasets.instruct_dataset
    source: json
    split: train
    column_map:
      input: theorem
      output: proof
    data_dir: /data/users/ebs/naturalproofsdata/
    data_files: naturalproofs_stein_cleaned.json

seed: null
shuffle: True
batch_size: 2

# # Dataset and Sampler
# dataset:
#   _component_: torchtune.datasets.alpaca_cleaned_dataset


# Optimizer and Scheduler
optimizer:
  _component_: torch.optim.AdamW
  fused: True
  weight_decay: 0.01
  lr: 3e-4
lr_scheduler:
  _component_: torchtune.modules.get_cosine_schedule_with_warmup
  num_warmup_steps: 100

loss:
  _component_: torchtune.modules.loss.CEWithChunkedOutputLoss

# Training
epochs: 1
max_steps_per_epoch: null
gradient_accumulation_steps: 16
compile: False

# Logging
output_dir: /tmp/lora_finetune_output
metric_logger:
  _component_: torchtune.training.metric_logging.WandBLogger
  log_dir: ${output_dir}
  project: torchtune-does-math
log_every_n_steps: 1
log_peak_memory_stats: True

# Environment
device: cuda
dtype: bf16

# Activations Memory
enable_activation_checkpointing: True
enable_activation_offloading: False

# Show case the usage of pytorch profiler
# Set enabled to False as it's only needed for debugging training
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False

  #Output directory of trace artifacts
  output_dir: ${output_dir}/profiling_outputs

  #`torch.profiler.ProfilerActivity` types to trace
  cpu: True
  cuda: True

  #trace options passed to `torch.profiler.profile`
  profile_memory: False
  with_stack: False
  record_shapes: True
  with_flops: False

  # `torch.profiler.schedule` options:
  # wait_steps -> wait, warmup_steps -> warmup, active_steps -> active, num_cycles -> repeat
  wait_steps: 5
  warmup_steps: 5
  active_steps: 2
  num_cycles: 1
